version: '3'

services:

# ============ TRAEFIK ================== 
  reverse-proxy:
    image: traefik:v3.1
    container_name: traefik
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    command: 
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--api.insecure=false"
      - "--api.dashboard=true"
      - "--providers.docker"
      - "--providers.docker.watch"
      - "--log=true"
      - "--log.filePath=/logs/traefik.log"
      - "--log.level=DEBUG"
      - "--certificatesresolvers.letsencrypt.acme.email=${CF_API_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=0"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
    labels:
      - "traefik.http.routers.reverse-proxy-rtr.rule=Host(`${DOMAIN_TRAEFIK}`)"
      - "traefik.http.routers.reverse-proxy-rtr.entrypoints=https"
      - "traefik.http.routers.reverse-proxy-rtr.tls=true"
      - "traefik.http.routers.reverse-proxy-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.reverse-proxy-rtr.service=api@internal"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_AUTH}"
      - "traefik.http.middlewares.traefik-auth.basicauth.removeheader=true"
      - "traefik.http.routers.reverse-proxy-rtr.middlewares=traefik-auth"
      - "com.centurylinklabs.watchtower.enable=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-logs:/logs
      - ./letsencrypt:/letsencrypt
    environment:
      # - CF_API_EMAIL=${CF_API_EMAIL}
      # - CF_API_KEY=${CF_API_KEY}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - CF_ZONE_API_TOKEN=${CF_ZONE_API_TOKEN}
    networks:
      - traefik

# ============ OPEN FGA ================== 
  open_fga_postgres:
    image: postgres:14-alpine
    container_name: fga_postgres
    networks:
      - traefik
    environment:
      - POSTGRES_USER=${FGA_PG_USERNAME}
      - POSTGRES_PASSWORD=${FGA_PG_PASSWORD}
    volumes:
      - openfga_db:/var/lib/postgresql/data
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${FGA_PG_USERNAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  open_fga_migrate:
    depends_on:
      open_fga_postgres:
        condition: service_healthy
    image: openfga/openfga:latest
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://${FGA_PG_USERNAME}:${FGA_PG_PASSWORD}@fga_postgres:5432/postgres?sslmode=disable
    networks:
      - traefik
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  open_fga:
    container_name: openfga
    depends_on:
      open_fga_migrate:
        condition: service_completed_successfully
    image: openfga/openfga:latest
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://${FGA_PG_USERNAME}:${FGA_PG_PASSWORD}@fga_postgres:5432/postgres?sslmode=disable
      - OPENFGA_LOG_FORMAT=json
    command: run
    networks:
      - traefik
    labels:
      - "traefik.http.routers.openfga.service=openfga"
      - "traefik.http.services.openfga.loadbalancer.server.port=3000"
      - "traefik.http.routers.openfga.rule=Host(`${DOMAIN_OPENFGA}`)"
      - "traefik.http.routers.openfga.entrypoints=https"
      - "traefik.http.routers.openfga.tls=true"
      - "traefik.http.routers.openfga.tls.certresolver=letsencrypt"
      - "traefik.http.routers.openfga.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_AUTH}"
      - "traefik.http.middlewares.traefik-auth.basicauth.removeheader=true"
      - "com.centurylinklabs.watchtower.enable=false"
      
# ============ WATCH TOWER ================== 
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - /root/.docker/config.json:/config.json
    command: --interval 30 --label-enable --rolling-restart --cleanup
    environment:
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}
      - WATCHTOWER_NOTIFICATION_TEMPLATE=${WATCHTOWER_NOTIFICATION_TEMPLATE}

    

volumes:
  traefik-logs:
  openfga_db:

networks:
  traefik: {}